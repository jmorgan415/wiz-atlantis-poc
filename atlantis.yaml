version: 3
automerge: false
parallel_plan: true
parallel_apply: true

projects:
########## VPC ##########
- name: wiz-demo-infra-vpc
  dir: terraform/aws/shared/vpc
  terraform_version: v1.1.9
  workspace: wiz-demo-infra
  workflow: aws
  autoplan:
    when_modified: ["*.tf", "*.tfvars"]
  apply_requirements: [mergeable]

########## EKS ##########
- name: wiz-demo-infra-eks
  dir: terraform/aws/shared/eks
  terraform_version: v1.1.9
  workspace: wiz-demo-infra
  workflow: aws
  autoplan:
    when_modified: ["*.tf", "*.tfvars"]
  apply_requirements: [mergeable]

########## IAM Atlantis ##########
- name: wiz-demo-infra-iam-atlantis
  dir: terraform/aws/account/iam/atlantis
  terraform_version: v1.1.9
  workspace: wiz-demo-infra
  workflow: aws
  autoplan:
    when_modified: ["*.tf", "config.tfvars"]
  apply_requirements: [mergeable]

########## Apps ##########
## aws ##
- name: aws-demo
  dir: terraform/aws/apps/bucket
  terraform_version: v1.1.9
  workspace: aws-demo
  workflow: aws
  autoplan:
    when_modified: ["*.tf", "*.tfvars"]
  apply_requirements: [mergeable]

## gcp ##
- name: gcp-demo
  dir: terraform/gcp/apps/bucket
  terraform_version: v1.1.9
  workspace: gcp-demo
  workflow: gcp
  autoplan:
    when_modified: ["*.tf", "*.tfvars"]
  apply_requirements: [mergeable]

## azure ##
- name: azure-demo
  dir: terraform/azure/apps/rg
  terraform_version: v1.1.9
  workspace: azure-demo
  workflow: azure
  autoplan:
    when_modified: ["*.tf", "*.tfvars"]
  apply_requirements: [mergeable]

# Non-default workflows:
workflows:
  aws:
    plan:
      steps:
      - run: terraform${ATLANTIS_TERRAFORM_VERSION} init -input=false -no-color
      - run: terraform${ATLANTIS_TERRAFORM_VERSION} workspace select -no-color ${WORKSPACE} || terraform${ATLANTIS_TERRAFORM_VERSION} workspace new ${WORKSPACE} && terraform${ATLANTIS_TERRAFORM_VERSION} workspace select -no-color ${WORKSPACE}
      - run: terraform${ATLANTIS_TERRAFORM_VERSION} plan -var-file=./${WORKSPACE}.tfvars -input=false -refresh -no-color -parallelism=50 -out $PLANFILE
    apply:
      steps:
      - run: terraform${ATLANTIS_TERRAFORM_VERSION} apply -no-color -parallelism=50 $PLANFILE
  azure:
    plan:
      steps:
      - env:
          name: ARM_CLIENT_ID
          command: 'aws secretsmanager get-secret-value --secret-id atlantis --region us-east-2 | jq --raw-output .SecretString | jq -r ".azure_creds" | jq -r ".appId"'
      - env:
          name: ARM_CLIENT_SECRET
          command: 'aws secretsmanager get-secret-value --secret-id atlantis --region us-east-2 | jq --raw-output .SecretString | jq -r ".azure_creds" | jq -r ".password"'
      - env:
          name: ARM_SUBSCRIPTION_ID
          command: 'aws secretsmanager get-secret-value --secret-id atlantis --region us-east-2 | jq --raw-output .SecretString | jq -r ".azure_creds" | jq -r ".subscription"'
      - env:
          name: ARM_TENANT_ID
          command: 'aws secretsmanager get-secret-value --secret-id atlantis --region us-east-2 | jq --raw-output .SecretString | jq -r ".azure_creds" | jq -r ".tenant"'
      - run: terraform${ATLANTIS_TERRAFORM_VERSION} init -input=false -no-color
      - run: terraform${ATLANTIS_TERRAFORM_VERSION} workspace select -no-color ${WORKSPACE} || terraform${ATLANTIS_TERRAFORM_VERSION} workspace new ${WORKSPACE} && terraform${ATLANTIS_TERRAFORM_VERSION} workspace select -no-color ${WORKSPACE}
      - run: if [ -v "$ARM_CLIENT_ID" ] && [ -v "$ARM_CLIENT_SECRET" ] && [ -v "$ARM_SUBSCRIPTION_ID" ] && [ -v "$ARM_TENANT_ID" ]; then terraform${ATLANTIS_TERRAFORM_VERSION} plan -var-file=./${WORKSPACE}.tfvars -input=false -refresh -no-color -parallelism=50 -out $PLANFILE; else echo "Please add the required env vars for the azure terraform provider"; fi
    apply:
      steps:
      - run: terraform${ATLANTIS_TERRAFORM_VERSION} apply -no-color -parallelism=50 $PLANFILE
  gcp:
    plan:
      steps:
      - env:
          name: GOOGLE_CREDENTIALS
          command: 'aws secretsmanager get-secret-value --secret-id atlantis --region us-east-2 | jq --raw-output .SecretString | jq -r ".gcp_creds"'
      - run: terraform${ATLANTIS_TERRAFORM_VERSION} init -input=false -no-color
      - run: terraform${ATLANTIS_TERRAFORM_VERSION} workspace select -no-color ${WORKSPACE} || terraform${ATLANTIS_TERRAFORM_VERSION} workspace new ${WORKSPACE} && terraform${ATLANTIS_TERRAFORM_VERSION} workspace select -no-color ${WORKSPACE}
      - run: if [ -v "$GOOGLE_CREDENTIALS" ]; then terraform${ATLANTIS_TERRAFORM_VERSION} plan -var-file=./${WORKSPACE}.tfvars -input=false -refresh -no-color -parallelism=50 -out $PLANFILE; else echo "Please add the required env vars for the google terraform provider"; fi
    apply:
      steps:
      - run: terraform${ATLANTIS_TERRAFORM_VERSION} apply -no-color -parallelism=50 $PLANFILE
